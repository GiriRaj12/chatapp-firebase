[{"/Users/giri/Documents/pwa/pwa-app/src/index.js":"1","/Users/giri/Documents/pwa/pwa-app/src/reportWebVitals.js":"2","/Users/giri/Documents/pwa/pwa-app/src/App.js":"3","/Users/giri/Documents/pwa/pwa-app/src/components/ChatWindow.js":"4","/Users/giri/Documents/pwa/pwa-app/src/firebaseHanlders/constants.js":"5","/Users/giri/Documents/pwa/pwa-app/src/components/LoginPage.js":"6","/Users/giri/Documents/pwa/pwa-app/src/firebaseHanlders/firebase.js":"7","/Users/giri/Documents/pwa/pwa-app/src/components/LandingPage.js":"8","/Users/giri/Documents/pwa/pwa-app/src/firebaseHanlders/users.js":"9","/Users/giri/Documents/pwa/pwa-app/src/components/ChatRoom.js":"10","/Users/giri/Documents/pwa/pwa-app/src/firebaseHanlders/messages.js":"11"},{"size":645,"mtime":1610203703319,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1610174948006,"results":"14","hashOfConfig":"13"},{"size":722,"mtime":1610253262113,"results":"15","hashOfConfig":"13"},{"size":7762,"mtime":1613228652756,"results":"16","hashOfConfig":"13"},{"size":444,"mtime":1610181773769,"results":"17","hashOfConfig":"13"},{"size":1583,"mtime":1612701782106,"results":"18","hashOfConfig":"13"},{"size":176,"mtime":1610197739927,"results":"19","hashOfConfig":"13"},{"size":571,"mtime":1610802602665,"results":"20","hashOfConfig":"13"},{"size":613,"mtime":1612704890593,"results":"21","hashOfConfig":"13"},{"size":5527,"mtime":1613236543415,"results":"22","hashOfConfig":"13"},{"size":4217,"mtime":1613234845918,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1s5apb7",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/giri/Documents/pwa/pwa-app/src/index.js",[],["50","51"],"/Users/giri/Documents/pwa/pwa-app/src/reportWebVitals.js",[],"/Users/giri/Documents/pwa/pwa-app/src/App.js",[],"/Users/giri/Documents/pwa/pwa-app/src/components/ChatWindow.js",["52","53","54"],"import React, { useEffect, useState } from 'react';\nimport firebase from 'firebase';\nimport { Avatar, Drawer, List, ListItem, Typography, Grid, InputBase, Button, ListItemText } from '@material-ui/core';\nimport logo from '../images/logo.jpg';\nimport { getUsers } from '../firebaseHanlders/users';\nimport { SearchRounded } from '@material-ui/icons';\nimport './styles/ChatWindow.css';\nimport ChatRoom from './ChatRoom';\nimport { saveInitiatedMessages, getInitiatedMessages } from '../firebaseHanlders/messages';\nimport { useHistory } from 'react-router-dom';\n\nfunction ChatWindow() {\n    let [user, setUser] = useState(null);\n\n    let [searchUserList, setSearchUserList] = useState([]);\n\n    let [searchTerm, setSearchTerm] = useState(null);\n\n    let [chatUsers, setChatUsers] = useState([]);\n\n    let [targetUser, setTargetUser] = useState(null);\n\n    let history = useHistory();\n\n\n\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged(currentUser => {\n            if (!user && currentUser) {\n                setUser(currentUser);\n                getInitiatesMessagesForChatWindow(currentUser);\n                getSearchUserList();\n            }\n            else {\n                history.push(\"/Login\");\n            }\n        });\n    }, []);\n\n    let getInitiatesMessagesForChatWindow = (currentUser) => {\n        console.log(\"Into get initiated messages\");\n        if (currentUser) {\n            console.log(currentUser.uid);\n            getInitiatedMessages(currentUser.uid)\n                .get()\n                .then(function (doc) {\n                    if (doc.exists) {\n                        let data = doc.data();\n                        setChatUsers(data.initiatedList);\n                    }\n                });\n        }\n    }\n\n    let getSearchUserList = () => {\n        let userPromise = getUsers();\n        userPromise.then((querySnapshot) => {\n            let users = [];\n            querySnapshot.forEach(function (doc) {\n                let user = doc.data();\n                users.push(user);\n            });\n            setSearchUserList(users);\n        })\n    }\n\n    let handleUserSelect = (id) => {\n        let thisUser = null;\n        for (let currentUser of searchUserList) {\n            if (currentUser.id === id) {\n                thisUser = currentUser;\n            }\n        }\n\n        if (thisUser) {\n            saveInitiatedMessages(user.uid, thisUser);\n            let chats = chatUsers;\n            let toAddChatUsers = true;\n            for (let chatUser in chatUsers) {\n                if (chatUser.id == thisUser.id) {\n                    toAddChatUsers = false;\n                }\n            }\n\n            if (toAddChatUsers) {\n                chats.push(thisUser);\n                setChatUsers(chats);\n            }\n            setSearchUserList([]);\n            setSearchTerm('');\n        }\n    }\n\n    let setTargetUserId = (id) => {\n        let selectedUser = null;\n        for (let currentUser of chatUsers) {\n            if (currentUser.id === id) {\n                selectedUser = Object.assign({}, currentUser);\n                setTargetUser(selectedUser);\n                break;\n            }\n        }\n    }\n\n    let chatRoom = (user, targetUser) => {\n        if (user && targetUser) {\n            return <ChatRoom currentUser={user} targetUser={targetUser} ></ChatRoom>\n        }\n        return;\n    }\n\n    return (\n        <div>\n            <div style={{ width: '240px', height: '100%', position: 'relative' }}>\n                <Drawer\n                    container\n                    variant='permanent'\n                    PaperProps={{ backgroundColor: 'blue', width: '10%', }}\n                >\n                    <div style={{ margin: '10px auto' }}>\n                        <img\n                            alt=\"Loading..\"\n                            src={logo}\n                            width=\"60px\"\n                            height=\"60px\"\n                        >\n                        </img>\n                        <Typography>\n                            - Ping -\n                    </Typography>\n                    </div>\n                    <Avatar\n                        style={{ width: '100px', height: '100px', boxShadow: '0 0 0.5 0 grey', margin: '20px auto' }}\n                        alt={user ? user.displayName : 'A'}\n                        src={user ? user.photoURL : ''}\n                    >\n                    </Avatar>\n                    <Typography style={{ margin: '10px auto' }}>{user ? user.displayName : ''}</Typography>\n                    <Grid\n                        container\n                        className=\"search-container\"\n                    >\n                        <Grid\n                            item\n                        >\n                            <SearchRounded style={{ padding: '4px' }} />\n                        </Grid>\n                        <Grid\n                            item\n                        >\n                            <InputBase\n                                placeholder=\"Search Users\"\n                                onClick={() => { getSearchUserList() }}\n                                onChange={(e) => setSearchTerm(e.target.value)}\n                                value={searchTerm}\n                            >\n                            </InputBase>\n                        </Grid>\n                    </Grid>\n                    {getUsersListView(searchUserList, searchTerm, handleUserSelect)}\n                    <div className=\"chat-items-list-container\">\n                        {getChatItemsView(chatUsers, setTargetUserId)}\n                    </div>\n                    <div className=\"logout-view\">\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            onClick={() => {\n                                firebase.auth().signOut().then(() => {\n                                    history.push(\"/Login\");\n                                });\n                            }}\n                        >Logout</Button>\n                    </div>\n                </Drawer>\n            </div>\n            <div style={{ position: 'fixed', height: '80%', right: '10', width: '90%' }}>\n                {chatRoom(user, targetUser)};\n            </div>\n        </div >\n    )\n}\n\nfunction getUsersListView(searchUserList = [], searchTerm, callback) {\n\n    if (!(searchUserList && searchTerm))\n        return '';\n\n    if (!(searchUserList.length > 0)) {\n        return '';\n    }\n\n\n    let getSearchUserList = () => {\n        return searchUserList.map(user => {\n            if (searchTerm && user.userName.includes(searchTerm)) {\n                return <ListItem id={user.id} key={user.id}>{user.userName}</ListItem>\n            }\n            else {\n                return '';\n            }\n        })\n    }\n\n    return (\n        <div className=\"users-list-view-container\">\n            <div className=\"down-button-view\">\n            </div>\n            <div className=\"users-list-view\" onClick={e => callback(e.target.id)}>\n                <List>\n                    {getSearchUserList()}\n                </List>\n            </div>\n        </div>);\n}\n\nfunction getChatItemsView(chatUsers, setTargetUser) {\n\n    console.log(\"Chat users\", chatUsers);\n\n    if (!chatUsers) {\n        return;\n    }\n\n    let handleClickEvent = (id) => {\n        setTargetUser(id);\n    }\n\n    return <List>\n        {chatUsers.map(e => {\n            return <ListItem>\n                <div>\n                    <p id={e.id} onClick={(e) => handleClickEvent(e.target.id)} style={{ cursor: 'pointer', width: '100%' }} >{e.userName}</p>\n                </div>\n            </ListItem>\n        })}\n    </List>\n}\n\n\nexport default ChatWindow;","/Users/giri/Documents/pwa/pwa-app/src/firebaseHanlders/constants.js",[],"/Users/giri/Documents/pwa/pwa-app/src/components/LoginPage.js",["55"],"import React, { useEffect } from 'react';\nimport { Button, Card, CardContent, Typography } from '@material-ui/core';\nimport firebase from 'firebase';\nimport './styles/LoginPage.css';\nimport { saveUser } from '../firebaseHanlders/users';\nimport { useHistory } from 'react-router-dom';\n\nfunction LoginPage() {\n    let auth = firebase.auth();\n    let history = useHistory();\n\n    const googleSignIn = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        auth.signInWithPopup(provider)\n            .then((response) => {\n                console.log(response);\n                saveUser(response.user);\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n\n    useEffect(() => {\n        firebase\n            .auth().onAuthStateChanged(user => {\n                if (user) {\n                    history.push(\"/Chat\");\n                }\n            })\n    }, [])\n\n    return (\n        <div className='sign-in-view'>\n            <div className='sign-in-container'>\n                <Card style={{ width: '40%', height: '40%' }}>\n                    <CardContent>\n                        <Typography>Please sign in to continue</Typography>\n                    </CardContent>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        onClick={() => googleSignIn()}\n                    >\n                        Google SignIn\n                </Button>\n                </Card>\n            </div>\n        </div>\n    )\n}\n\nexport default LoginPage;","/Users/giri/Documents/pwa/pwa-app/src/firebaseHanlders/firebase.js",[],"/Users/giri/Documents/pwa/pwa-app/src/components/LandingPage.js",[],"/Users/giri/Documents/pwa/pwa-app/src/firebaseHanlders/users.js",[],"/Users/giri/Documents/pwa/pwa-app/src/components/ChatRoom.js",["56","57","58"],"import { Grid, TextField, Button, Avatar, Typography } from '@material-ui/core';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { saveChatRoomMessage, getChatRoomMessages } from '../firebaseHanlders/messages';\nimport { v4 } from 'uuid';\nimport './styles/ChatRoom.css';\n\nfunction ChatRoom(props) {\n    const messagesEndRef = useRef(null);\n\n    let [currentMessage, setCurrentMessage] = useState(null);\n\n    let [messages, setMessages] = useState(null);\n\n    let [id, setId] = useState(props.id);\n\n    useEffect(() => {\n        getChatRoomMessages(props.targetUser.chatId)\n            .onSnapshot(function (doc) {\n                let data = doc.data();\n                console.log(data);\n                if (data) {\n                    scrollToBottom()\n                    setMessages(data.messages);\n                }\n            });\n\n        if (props.targetUser) {\n            getMessagesFromFirebase(props.targetUser.chatId);\n        }\n        scrollToBottom()\n    }, []);\n\n    let scrollToBottom = () => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n\n    let saveMessage = (text) => {\n        let timestamp = new Date().getTime();\n        let obj = {\n            id: v4(),\n            message: text,\n            time: timestamp,\n            userId: props.currentUser.uid,\n        }\n        saveChatRoomMessage(obj, props.currentUser, props.targetUser);\n        setCurrentMessage('');\n    }\n\n    let getMessagesFromFirebase = (chatId) => {\n        console.log(\"Chat id\", chatId);\n        getChatRoomMessages(chatId)\n            .get()\n            .then(function (doc) {\n                console.log(\"Into messages\");\n                if (doc.exists) {\n                    console.log(\"Doc exists\");\n                    console.log(doc.data());\n                    let message = doc.data();\n                    setMessages(message.messages);\n                }\n            });\n    }\n\n    return (\n        <Grid container style={{ marginLeft: '18%', width: '95%', height: '100%', display: 'flex', flexDirection: 'column-reverse' }} key={props.targetUser.id}>\n            <Grid item style={{ width: '93%', margin: '10px', height: '100%', overflow: 'scroll' }}>\n                {getMessages(messages, props.currentUser, props.targetUser, messagesEndRef)}\n            </Grid>\n            <Grid item style={{ width: '85%', height: '15%', position: 'fixed', bottom: '0', overflow: 'scroll' }}>\n                <TextField\n                    style={{ width: '95%' }}\n                    label=\"Message\"\n                    value={currentMessage}\n                    onChange={(e) => setCurrentMessage(e.target.value)}\n                ></TextField>\n                <div style={{ padding: '10px' }}>\n                    <Button variant='contained' color='primary' style={{ marginLeft: '10px' }} onClick={() => saveMessage(currentMessage)}>Submit</Button>\n                    <Button variant='contained' color='secondary' style={{ marginLeft: '10px' }} onClick={() => setCurrentMessage('')} >Cancel</Button>\n                    <Button variant='contained' color='primary' style={{ marginLeft: '10px' }} onClick={() => getMessagesFromFirebase(props.targetUser.chatId)} >Load Messages</Button>\n                </div>\n            </Grid>\n        </Grid>\n    )\n}\n\nfunction getMessages(messages, user, targetUser, messageEndRef) {\n    if (messages) {\n        return <div>\n            {messages.map(e => {\n                if (e.userId === user.uid) {\n                    return <div className='message-body right'>\n                        <div className='message-conatiner right'>\n                            <Grid container style={{ padding: '2px', margin: '10px' }} key={v4()}>\n                                <Grid container direction=\"row\">\n                                    <Avatar style={{ height: '20px', width: '20px', padding: '10px' }} src={user.photoURL}></Avatar>\n                                    <p>{user.displayName}</p>\n                                </Grid>\n                                <Grid container>\n                                    <Typography style={{ marginLeft: '10px', width: 'fit-content' }}>{e.message}</Typography>\n                                </Grid>\n                            </Grid>\n                            <div className=\"chat-by-depth-div right-div\">\n                            </div>\n                        </div>\n                    </div>\n                } else {\n                    return <div className='message-body left'>\n                        <div className='message-conatiner left'>\n                            <Grid container style={{ padding: '2px', margin: '10px' }} key={v4()}>\n                                <Grid container direction=\"row\">\n                                    <Avatar style={{ height: '20px', width: '20px', padding: '10px' }} src={targetUser.imageUrl}></Avatar>\n                                    <p>{targetUser.userName}</p>\n                                </Grid>\n                                <Grid container>\n                                    <Typography style={{ marginLeft: '10px' }}>{e.message}</Typography>\n                                </Grid>\n                            </Grid>\n                            <div className=\"chat-by-depth-div left-div\">\n                            </div>\n                        </div>\n                    </div >\n                }\n            })\n            }\n            <div ref={messageEndRef} />\n        </div>\n    }\n}\n\nexport default ChatRoom;","/Users/giri/Documents/pwa/pwa-app/src/firebaseHanlders/messages.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":3,"column":79,"nodeType":"65","messageId":"66","endLine":3,"endColumn":91},{"ruleId":"67","severity":1,"message":"68","line":38,"column":8,"nodeType":"69","endLine":38,"endColumn":10,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":80,"column":33,"nodeType":"73","messageId":"74","endLine":80,"endColumn":35},{"ruleId":"67","severity":1,"message":"75","line":31,"column":8,"nodeType":"69","endLine":31,"endColumn":10,"suggestions":"76"},{"ruleId":"63","severity":1,"message":"77","line":14,"column":10,"nodeType":"65","messageId":"66","endLine":14,"endColumn":12},{"ruleId":"63","severity":1,"message":"78","line":14,"column":14,"nodeType":"65","messageId":"66","endLine":14,"endColumn":19},{"ruleId":"67","severity":1,"message":"79","line":31,"column":8,"nodeType":"69","endLine":31,"endColumn":10,"suggestions":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'ListItemText' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["83"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["84"],"'id' is assigned a value but never used.","'setId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.targetUser'. Either include it or remove the dependency array.",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [history, user]",{"range":"92","text":"93"},"Update the dependencies array to be: [history]",{"range":"94","text":"95"},"Update the dependencies array to be: [props.targetUser]",{"range":"96","text":"97"},[1249,1251],"[history, user]",[925,927],"[history]",[990,992],"[props.targetUser]"]